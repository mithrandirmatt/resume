{"ast":null,"code":"import _classCallCheck from \"/home/olorin/Desktop/projects/html_resume/mlc_resume/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/olorin/Desktop/projects/html_resume/mlc_resume/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport debug from 'debug';\nvar DEBUG_ENABLED = false;\nvar BASE = 'awesome-react-app';\nvar COLOURS = {\n  trace: 'lightblue',\n  info: 'blue',\n  warn: 'orange',\n  error: 'red'\n};\n\nvar Log =\n/*#__PURE__*/\nfunction () {\n  function Log() {\n    _classCallCheck(this, Log);\n  }\n\n  _createClass(Log, [{\n    key: \"generateMessage\",\n    value: function generateMessage(level, message, source) {\n      // Set the prefix which will cause debug to enable the message\n      var namespace = \"\".concat(BASE, \":\").concat(level);\n      var createDebug = debug(namespace); // Set the colour of the message based on the level\n\n      createDebug.color = COLOURS[level];\n\n      if (DEBUG_ENABLED === true) {\n        if (source) {\n          createDebug(source, message);\n        } else {\n          createDebug(message);\n        }\n      }\n    }\n  }, {\n    key: \"trace\",\n    value: function trace(message, source) {\n      return this.generateMessage('trace', message, source);\n    }\n  }, {\n    key: \"info\",\n    value: function info(message, source) {\n      return this.generateMessage('info', message, source);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, source) {\n      return this.generateMessage('warn', message, source);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, source) {\n      return this.generateMessage('error', message, source);\n    }\n  }]);\n\n  return Log;\n}();\n\nexport default new Log();","map":{"version":3,"sources":["/home/olorin/Desktop/projects/html_resume/mlc_resume/src/js/Log.js"],"names":["debug","DEBUG_ENABLED","BASE","COLOURS","trace","info","warn","error","Log","level","message","source","namespace","createDebug","color","generateMessage"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,aAAa,GAAG,KAAtB;AACA,IAAMC,IAAI,GAAG,mBAAb;AACA,IAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,WADO;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,IAAI,EAAE,QAHQ;AAIdC,EAAAA,KAAK,EAAE;AAJO,CAAhB;;IAOMC,G;;;;;;;;;oCACYC,K,EAAOC,O,EAASC,M,EAAQ;AACtC;AACA,UAAMC,SAAS,aAAMV,IAAN,cAAcO,KAAd,CAAf;AACA,UAAMI,WAAW,GAAGb,KAAK,CAACY,SAAD,CAAzB,CAHsC,CAKtC;;AACAC,MAAAA,WAAW,CAACC,KAAZ,GAAoBX,OAAO,CAACM,KAAD,CAA3B;;AAEA,UAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,YAAGU,MAAH,EAAW;AAAEE,UAAAA,WAAW,CAACF,MAAD,EAASD,OAAT,CAAX;AAA+B,SAA5C,MACK;AAAEG,UAAAA,WAAW,CAACH,OAAD,CAAX;AAAuB;AAC/B;AACF;;;0BAEKA,O,EAASC,M,EAAQ;AACrB,aAAO,KAAKI,eAAL,CAAqB,OAArB,EAA8BL,OAA9B,EAAuCC,MAAvC,CAAP;AACD;;;yBAEID,O,EAASC,M,EAAQ;AACpB,aAAO,KAAKI,eAAL,CAAqB,MAArB,EAA6BL,OAA7B,EAAsCC,MAAtC,CAAP;AACD;;;yBAEID,O,EAASC,M,EAAQ;AACpB,aAAO,KAAKI,eAAL,CAAqB,MAArB,EAA6BL,OAA7B,EAAsCC,MAAtC,CAAP;AACD;;;0BAEKD,O,EAASC,M,EAAQ;AACrB,aAAO,KAAKI,eAAL,CAAqB,OAArB,EAA8BL,OAA9B,EAAuCC,MAAvC,CAAP;AACD;;;;;;AAGH,eAAe,IAAIH,GAAJ,EAAf","sourcesContent":["import debug from 'debug';\n\nconst DEBUG_ENABLED = false;\nconst BASE = 'awesome-react-app';\nconst COLOURS = {\n  trace: 'lightblue',\n  info: 'blue',\n  warn: 'orange',\n  error: 'red'\n};\n\nclass Log {\n  generateMessage(level, message, source) {\n    // Set the prefix which will cause debug to enable the message\n    const namespace = `${BASE}:${level}`;\n    const createDebug = debug(namespace);\n\n    // Set the colour of the message based on the level\n    createDebug.color = COLOURS[level];\n\n    if( DEBUG_ENABLED === true ){\n      if(source) { createDebug(source, message); }\n      else { createDebug(message); }\n    }\n  }\n\n  trace(message, source) {\n    return this.generateMessage('trace', message, source);\n  }\n\n  info(message, source) {\n    return this.generateMessage('info', message, source);\n  }\n\n  warn(message, source) {\n    return this.generateMessage('warn', message, source);\n  }\n\n  error(message, source) {\n    return this.generateMessage('error', message, source);\n  }\n}\n\nexport default new Log();\n"]},"metadata":{},"sourceType":"module"}